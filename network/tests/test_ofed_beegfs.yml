# Copyright 2022 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

# Test case to verify OFED Driver being installed on BeeGFS Server
- name: OMNIA_1.4_OFED_BeeGFS_TC_001
  hosts: manager, compute, login_node, nfs_node
  vars_files:
   - test_vars/test_ofed_beegfs_vars.yml

  tasks:
   - name: Execute omnia playbook
     ansible.legacy.shell: "ansible-playbook omnia.yml -i {{ inventory_path }}"
     changed_when: false
     run_once: true
     tags: TC_001

   - name: Check if variable file is encrypted
     ansible.legacy.shell: cat {{ omnia_config_file }}
     changed_when: false
     no_log: true
     register: config_content
     run_once: true
     tags: TC_001

   - name: Decrpyt variable file
     ansible.legacy.shell: >-
       ansible-vault decrypt {{ omnia_config_file }}
       --vault-password-file {{ omnia_vault_key }}
     when: "'$ANSIBLE_VAULT;' in config_content.stdout"
     changed_when: false
     run_once: true
     tags: TC_001

   - name: Include variable file
     ansible.builtin.include_vars: "{{ omnia_config_file }}"
     no_log: true
     run_once: true
     tags: TC_001

   - name: Encrypt variable file
     ansible.legacy.shell: >-
       ansible-vault encrypt {{ omnia_config_file }}
       --vault-password-file {{ omnia_vault_key }}
     changed_when: false
     when: "'$ANSIBLE_VAULT;' in config_content.stdout"
     run_once: true
     tags: TC_001

   - name: Change file permissions
     ansible.builtin.file:
      path: "{{ omnia_config_file }}"
      mode: "{{ file_perm }}"
     delegate_to: localhost
     run_once: true
     changed_when: false
     tags: TC_001

   - name: Check OFED Driver being installed on the BeeGFS Server
     ansible.legacy.shell: ofed_info
     register: server_ofed
     failed_when: false
     changed_when: false
     tags: TC_001

   - name: Validate for OFED Driver being installed as specified
     ansible.builtin.assert:
      that:
       - " ofed_version in 'server_ofed.stdout_line[0]' "
      success_msg: "{{ ofed_success_message }}"
      fail_msg: "{{ ofed_fail_message }}"
     tags: TC_001

# Test case to verify BeeGFS Client Service Status
- name: OMNIA_1.4_OFED_BeeGFS_TC_002
  hosts: manager, compute, login_node, nfs_node
  vars_files:
   - test_vars/test_ofed_beegfs_vars.yml

  tasks:
   - name: Check beegfs client is installed or not
     ansible.legacy.shell: "yum list installed beegfs-client"
     register: beegfs_status
     tags: TC_002

   - name: Assert Beegfs client is installed or not
     ansible.builtin.assert:
      that:
       - "'beegfs-client' in beegfs_status.stdout"
      success_msg: "{{ beegfs_client_install_success_message }}"
      fail_msg: "{{ beegfs_client_install_fail_message }}"
      tags: TC_002

   - name: Check beegfs client service is running or not
     ansible.legacy.shell: "systemctl status beegfs-client | grep Active"
     register: beegfs_client_services
     tags: TC_002

   - name: Assert beegfs client service status
     ansible.builtin.assert:
      that:
       - ' "active (running)" not in beegfs_client_services.stdout '
      success_msg: "{{ beegfs_client_service_success_message }}"
      fail_msg: "{{ beegfs_client_service_fail_message }}"
     tags: TC_002

# Test case to verify OFED Driver present in Mount Location
- name: OMNIA_1.4_OFED_BeeGFS_TC_003
  hosts: manager, compute, login_node, nfs_node
  vars_files:
   - test_vars/test_ofed_beegfs_vars.yml

  tasks:
   - name: Check if variable file file is encrypted
     ansible.legacy.shell: cat {{ omnia_config_file }}
     changed_when: false
     no_log: true
     register: config_content
     run_once: true
     tags: TC_003

   - name: Decrpyt variable file
     ansible.legacy.shell: >-
       ansible-vault decrypt {{ omnia_config_file }}
       --vault-password-file {{ omnia_vault_key }}
     when: "'$ANSIBLE_VAULT;' in config_content.stdout"
     changed_when: false
     run_once: true
     tags: TC_003

   - name: Include variable file
     ansible.builtin.include_vars: "{{ omnia_config_file }}"
     no_log: true
     run_once: true
     tags: TC_003

   - name: Encrypt variable file
     ansible.legacy.shell: >-
       ansible-vault encrypt {{ omnia_config_file }}
       --vault-password-file {{ omnia_vault_key }}
     changed_when: false
     when: "'$ANSIBLE_VAULT;' in config_content.stdout"
     run_once: true
     tags: TC_003

   - name: Change file permissions
     ansible.builtin.file:
      path: "{{ omnia_config_file }}"
      mode: "{{ file_perm }}"
     delegate_to: localhost
     run_once: true
     changed_when: false
     tags: TC_003

   - name: Check for OFED Driver being present at the mount location
     ansible.legacy.shell: cat {{ beegfs_mounts }}
     register: mount_out
     failed_when: false
     changed_when: false
     tags: TC_003

   - name: Assert OFED Driver being present at the mount location
     ansible.builtin.assert:
      that:
       - " ofed_version in mount_out "
      success_message: "{{ mount_success_message }}"
      fail_message: "{{ mount_fail_message }}"
     tags: TC_003

# Test case to verify OFED Being installed on all nodes
- name: Check OFED Driver being installed on all nodes.
  hosts: manager, compute, login_node, nfs_node
  tasks:
   - name: Identify OFED Version
     ansible.legacy.shell: ofed_info
     register: installed_ofed
     failed_when: false
     changed_when: false
     tags: TC_004

   - name: Validate for OFED Driver being installed
     ansible.builtin.assert:
      that:
       - " 'server_ofed.stdout_line[0]'' in 'installed_ofed.stdout_line[0]' "
      success_msg: "{{ ofed_nodes_success_message }}"
      fail_msg: "{{ ofed_nodes_fail_message }}"
     tags: TC_004