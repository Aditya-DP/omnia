# Copyright 2023 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Initialize variables
  ansible.builtin.set_fact:
    bmc_dynamic_start: 0.0.0.0
    bmc_dynamic_end: 0.0.0.1
    bmc_static_start: 0.0.0.2
    bmc_static_end: 0.0.0.3
    omnia_static_start: 0.0.0.4
    omnia_static_end: 0.0.0.5

- name: Update internal variables for dynamic values
  ansible.builtin.set_fact:
    bmc_dynamic_start: "{{ bmc_dynamic_start_range }}"
    bmc_dynamic_end: "{{ bmc_dynamic_end_range }}"
    omnia_static_start: "{{ omnia_exclusive_static_start_range }}"
    omnia_static_end: "{{ omnia_exclusive_static_end_range }}"
  when:
    - bmc_dynamic_status
    - not bmc_static_status

- name: Update internal variables for static values
  ansible.builtin.set_fact:
    bmc_static_start: "{{ bmc_static_start_range }}"
    bmc_static_end: "{{ bmc_static_end_range }}"
  when:
    - not bmc_dynamic_status
    - bmc_static_status

- name: Update internal variables for all values
  ansible.builtin.set_fact:
    bmc_dynamic_start: "{{ bmc_dynamic_start_range }}"
    bmc_dynamic_end: "{{ bmc_dynamic_end_range }}"
    bmc_static_start: "{{ bmc_static_start_range }}"
    bmc_static_end: "{{ bmc_static_end_range }}"
    omnia_static_start: "{{ omnia_exclusive_static_start_range }}"
    omnia_static_end: "{{ omnia_exclusive_static_end_range }}"
  when:
    - bmc_dynamic_status
    - bmc_static_status

- name: Validate input ranges for all ranges
  ansible.builtin.command: >-
    python3 {{ validation_range_file }} {{ bmc_dynamic_start }} {{ bmc_dynamic_end }} {{ bmc_static_start }}
    {{ bmc_static_end }} {{ omnia_static_start }} {{ omnia_static_end }}
  register: range_validation_status
  changed_when: true

- name: Fail if ranges overlap
  ansible.builtin.fail:
    msg: "{{ ranges_fail_msg }}"
  when: '"True" in range_validation_status.stdout'

- name: Status of input ranges validation
  ansible.builtin.assert:
    that:
      - "'False' in range_validation_status.stdout"
    success_msg: "{{ ranges_success_msg }}"
  failed_when: false

- name: Fail if ranges are not in valid format
  ansible.builtin.fail:
    msg: "{{ range_mismatch_msg }}"
  when: '"lower bound IP greater than upper bound!" in range_validation_status.stdout'

- name: Validate dynamic ranges count is greater than omnia ranges
  block:
    - name: Count dynamic ranges
      ansible.builtin.command: >-
        python3 {{ validation_ip_count }} {{ bmc_dynamic_start }} {{ bmc_dynamic_end }}
      register: dynamic_count
      changed_when: true

    - name: Count omnia ranges
      ansible.builtin.command: >-
        python3 {{ validation_ip_count }} {{ omnia_static_start }} {{ omnia_static_end }}
      register: omnia_count
      changed_when: true

    - name: Validate dynamic ranges count is greater than omnia ranges - wait for 5 seconds
      ansible.builtin.pause:
        seconds: "{{ warning_wait_time }}"
        prompt: "{{ range_warning_msg }}"
      when: dynamic_count.stdout | int < omnia_count.stdout | int
  when: bmc_dynamic_status
