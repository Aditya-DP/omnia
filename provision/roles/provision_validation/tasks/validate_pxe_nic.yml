# Copyright 2023 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Assert PXE nic value
  ansible.builtin.assert:
    that:
      - pxe_nic in nic_addr_up.stdout
    success_msg: " PXE {{ success_msg_nic }}"
    fail_msg: "{{ fail_msg_nic }} for PXE nic"
  tags: [validate, pxe-network]

- name: Verify public nic is different from others
  ansible.builtin.assert:
    that:
      - public_nic != pxe_nic
    success_msg: "{{ success_msg_different_nics }}"
    fail_msg: "{{ fail_msg_different_nics }}"
  tags: [validate, bmc-network, pxe-network]

- name: Validate if pxe_subnet of provision config is not empty
  ansible.builtin.fail:
    msg: "{{ pxe_subnet_failure_msg }}"
  when:
    - pxe_subnet | default("", true) | length < 1
    - not pxe_subnet | default("", true) | ansible.utils.ipv4

- name: Gather the MAC address of PXE nic
  ansible.builtin.set_fact:
    pxe_mac_address: "{{ ansible_facts[pxe_nic]['macaddress'] | default(None) }}"

- name: Set default pxe start and end ranges
  ansible.builtin.set_fact:
    pxe_nic_start_range: "{{ pxe_nic_start }}"
    pxe_nic_end_range: "{{ pxe_nic_end }}"

### PXE nic
# LOM Configuration
- name: Extracting PXE nic details in case of LOM
  block:
    - name: Set fact for extracting the subnet of PXE nic
      ansible.builtin.set_fact:
        pxe_nic_subnet: "{{ admin_nic_subnet }}"
      tags: init

    - name: Assign PXE nic details in case of LOM
      ansible.builtin.set_fact:
        pxe_nic_ip: "{{ admin_nic_ip }}"
        pxe_nic_netmask: "{{ admin_nic_netmask }}"
      tags: init
  when:
    - network_interface_type == "lom"
    - admin_nic == pxe_nic

# Dedicated configuration or ROCE Configuration
- name: Extracting PXE nic details in case of dedicated
  block:
    - name: Assign PXE nic details in case of LOM
      ansible.builtin.set_fact:
        pxe_nic_subnet: "{{ lookup('vars', 'ansible_' + pxe_nic).ipv4.network }}"
        pxe_nic_ip: "{{ lookup('vars', 'ansible_' + pxe_nic).ipv4.address }}"
        pxe_nic_netmask: "{{ lookup('vars', 'ansible_' + pxe_nic).ipv4.netmask }}"
      tags: init
  when:
    - network_interface_type == "dedicated" or
      admin_nic != pxe_nic

- name: Validate pxe_subnet
  ansible.builtin.fail:
    msg: "{{ pxe_subnet_msg }}"
  when: pxe_nic_subnet != pxe_subnet

- name: Validate snmp and mapping parameters
  block:
    - name: Set fact if roce is enabled or not
      ansible.builtin.set_fact:
        roce_enabled: true
      when:
        - admin_nic != pxe_nic
        - ib_nic_subnet | length > 6
        - pxe_nic_subnet == ib_nic_subnet

    - name: Update roce_enabled value in provision init file
      ansible.builtin.replace:
        path: "{{ provision_conf_path }}"
        regexp: "roce_enabled=.*"
        replace: "roce_enabled={{ roce_enabled }}"
  when: discovery_mechanism == discovery_method_snmp or
        discovery_mechanism == discovery_method_mapping
