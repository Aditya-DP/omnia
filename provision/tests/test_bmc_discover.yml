#  Copyright 2022 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---
# Execute all the TCs with this tag to decrypt config file
# Execute all the TCs with this tag to decrypt config file
- name: OMNIA_1.4.1_CONFIG_TC_001
  hosts: localhost
  vars_files:
    - "{{playbook_dir}}/test_vars/test_bmc_discover_vars.yml"
  tasks:
    - name: Decrypt provision_config.yml if encrypted
      block:
        - name: Check if provision config file is encrypted
          ansible.builtin.command: "cat {{ provision_config_file_path }}"
          changed_when: false
          no_log: true
          register: provision_config_content

        - name: Decrpyt provision_config.yml
          ansible.builtin.command: "ansible-vault decrypt {{ provision_config_file_path }} --vault-password-file {{ provision_config_vault_key }}"
          changed_when: false
          ignore_errors: true
      when: ("'$ANSIBLE_VAULT;' in provision_config_content.stdout")
  tags: TC_000

# Testcase to validate BMC IP discovery in static mode provided all required params
- name: OMNIA_1.4.1_BMC_DISC_001
  hosts: localhost
  vars_files:
    - "{{playbook_dir}}/test_vars/test_bmc_discover_vars.yml"
    - "{{ playbook_dir }}/../../input/provision_config.yml"
  tasks:
    - name: Validate BMC IP not empty for any server
      block:
        - name: Get total number of servers
          postgresql_query:
            db: "{{ omnia_db }}"
            login_user: "{{ postgres_user }}"
            query: SELECT count(*) FROM cluster.nodeinfo;
          register: total_count

        - name: Get total number of rows where bmc_ip is not empty
          postgresql_query:
            db: "{{ omnia_db }}"
            login_user: "{{ postgres_user }}"
            query: select count(bmc_ip) from cluster.nodeinfo where 'bmc_ip'!='';
          register: bmc_ip_count

        - name: Validate BMC IP not being empty for servers
          ansible.builtin.assert:
            that:
              - '{{ bmc_ip_count.query_result[0].count | int }} == {{ total_count.query_result[0].count | int }}'
            success_msg: "{{ bmc_ips_not_missing_msg }}"
            fail_msg: "{{ bmc_ips_missing_msg }}"
      tags: BMC_TC_001

# Validate ipmi enablement when IPs are dicovered in dynamic mode
# Pass node inventory as input containing host IPs
- name: OMNIA_1.4.1_BMC_DISC_002
  hosts: all
  vars_files:
    - "{{playbook_dir}}/test_vars/test_bmc_discover_vars.yml"
    - "{{ playbook_dir }}/../../input/provision_config.yml"
  tasks:
    - name: Validate IPMI is enabled on all hosts
      block:
        - name: Get the status of IPMI
          ansible.builtin.command: "ipmitool sel info"
          register: ipmi_help_records
          ignore_errors: true
          no_log: true
          changed_when: false

        - name: Validate IPMI status on all nodes
          ansible.builtin.assert:
            that:
              - "'Version' in ipmi_help_records.stdout"
            success_msg: "{{ ipmi_enabled_success_msg }}"
            fail_msg: "{{ ipmi_not_enabled_fail_msg }}"
      tags: BMC_TC_002

# Validate Omnia DB for discovered IPs with ST when discovery_method is BMC discovery and mode is static
# Validate Omnia DB for discovered IPs with ST when discovery_method is BMC discovery and mode is dynamic
- name: OMNIA_1.4.1_BMC_DISC_003
  hosts: localhost
  vars_files:
    - "{{playbook_dir}}/test_vars/test_bmc_discover_vars.yml"
    - "{{ playbook_dir }}/../../input/provision_config.yml"
  tasks:
    - name: Validate ST being present for all servers
      block:
        - name: Get total number of servers
          postgresql_query:
            db: "{{ omnia_db }}"
            login_user: "{{ postgres_user }}"
            query: SELECT count(*) FROM cluster.nodeinfo;
          register: total_count

        - name: Get total number of rows where bmc_ip is not empty
          postgresql_query:
            db: "{{ omnia_db }}"
            login_user: "{{ postgres_user }}"
            query: select count(serial) from cluster.nodeinfo where 'service_tag'!='';
          register: st_count

        - name: Validate service tag  not being empty for servers
          ansible.builtin.assert:
            that:
              - '{{ st_count.query_result[0].count | int }} == {{ total_count.query_result[0].count | int }}'
            success_msg: "{{ st_not_missing_msg }}"
            fail_msg: "{{ st_missing_msg }}"
      when: discovery_mechanism == 'bmc'
      tags: BMC_TC_003

# Validate BMC IP discovery in static mode when static range is not provided
- name: OMNIA_1.4.1_BMC_DISC_004
  hosts: localhost
  vars_files:
    - "{{playbook_dir}}/test_vars/test_bmc_discover_vars.yml"
    - "{{ playbook_dir }}/../../input/provision_config.yml"
  tasks:
    - name: Validate BMC discovery when static range is not provided
      block:
        - name: Execute provision.yml
          ansible.builtin.command: "ansible-playbook {{ provision_playbook_path }} -vv"
          no_log: true
          changed_when: false

        - name: View provision.yml logs
          ansible.builtin.command: "cat {{ provision_log_path }}"
          register: provision_log
          changed_when: false

        - name: Validate error message when static range is empty
          ansible.builtin.assert:
            that:
              - "'static range cannot be empty' in provision_log.stdout"
            success_msg: "{{ validate_static_range_success_msg }}"
            fail_msg: "{{ validate_static_range_fail_msg }}"
      when: (discovery_mechanism = 'bmc' and bmc_static_start_range != '' and bmc_static_end_range != '')
      tags: BMC_TC_004

# Validate BMC IP discovery when ranges provided out of subnet
- name: OMNIA_1.4.1_BMC_DISC_005
  hosts: localhost
  vars_files:
    - "{{playbook_dir}}/test_vars/test_bmc_discover_vars.yml"
    - "{{ playbook_dir }}/../../input/provision_config.yml"
  tasks:
    - name: Validate BMC discovery when ranges provided out of BMC subnet
      block:
        - name: Execute provision.yml
          ansible.builtin.command: "ansible-playbook {{ provision_playbook_path }} -vv"
          no_log: true
          changed_when: false

        - name: View provision.yml logs
          ansible.builtin.command: "cat {{ provision_log_path }}"
          register: provision_log
          changed_when: false

        - name: Validate error message when static range is out of subnet
          ansible.builtin.assert:
            that:
              - "'subnet and range doesn't match' in provision_log.stdout"
            success_msg: "{{ validate_subnet_range_success_msg }}"
            fail_msg: "{{ validate_subnet_range_fail_msg }}"
      when: discovery_mechanism = 'bmc'
      tags: BMC_TC_005

# Validate provisioning when discovery_method is empty
- name: OMNIA_1.4.1_BMC_DISC_006
  hosts: localhost
  vars_files:
    - "{{playbook_dir}}/test_vars/test_bmc_discover_vars.yml"
    - "{{ playbook_dir }}/../../input/provision_config.yml"
  tasks:
    - name: Validate provisioning when discovery_method is empty
      block:
        - name: Execute provision.yml
          ansible.builtin.command: "ansible-playbook {{ provision_playbook_path }} -vv"
          no_log: true
          changed_when: false

        - name: View provision.yml logs
          ansible.builtin.command: "cat {{ provision_log_path }}"
          register: provision_log
          changed_when: false

        - name: Validate error message when discovery method is empty
          ansible.builtin.assert:
            that:
              - "'discovery method cannot be empty' in provision_log.stdout"
            success_msg: "{{ validate_discovery_method_success_msg }}"
            fail_msg: "{{ validate_discovery_method_fail_msg }}"
      tags: BMC_TC_006

# Validate provisioning when discovery_method is other than accepted values
- name: OMNIA_1.4.1_BMC_DISC_007
  hosts: localhost
  vars_files:
    - "{{playbook_dir}}/test_vars/test_bmc_discover_vars.yml"
    - "{{ playbook_dir }}/../../input/provision_config.yml"
  tasks:
    - name: Validate provisioning when discovery_method is other than accepted values
      block:
        - name: Execute provision.yml
          ansible.builtin.command: "ansible-playbook {{ provision_playbook_path }} -vv"
          no_log: true
          changed_when: false

        - name: View provision.yml logs
          ansible.builtin.command: "cat {{ provision_log_path }}"
          register: provision_log
          changed_when: false

        - name: Validate error message when discovery method is empty
          ansible.builtin.assert:
            that:
              - "'invalid input' in provision_log.stdout"
            success_msg: "{{ validate_valid_discovery_method_success_msg }}"
            fail_msg: "{{ validate_valid_discovery_method_fail_msg }}"
      tags: BMC_TC_007
