#  Copyright 2023 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Tasks for slurm_manager role
  when: hostvars['127.0.0.1']['slurm_support']
  block:
    - name: Give slurm user permission to slurmctld spool
      ansible.builtin.file:
        path: "{{ spool_slurmctld_pth }}"
        owner: slurm
        group: slurm
        mode: "{{ tmp_mode }}"
        state: touch

    - name: Give slurm ownership to cluster state
      ansible.builtin.file:
        path: "{{ cluster_state_path }}"
        owner: slurm
        group: slurm
        mode: "{{ tmp_mode }}"
        state: touch

    - name: Create slurmctld log file on manager
      ansible.builtin.file:
        path: "{{ slurm_logpth }}"
        owner: slurm
        mode: "{{ tmp_mode }}"
        state: touch
      with_items:
        - slurmctld.log

    - name: Create log files on manager
      ansible.builtin.file:
        path: "{{ slurm_logpth }}"
        owner: slurm
        mode: "{{ tmp_mode }}"
        state: touch
      with_items:
        - "{{ log_files_manager }}"

    - name: Install packages for slurm
      ansible.builtin.package:
        name: "{{ slurm_packages }}"
        state: present
      tags: install
      when: os_supported_leap not in compute_os

    - name: Install packages for slurm
      ansible.builtin.package:
        name: "{{ leap_slurm_packages }}"
        state: present
      tags: install
      when: os_supported_leap in compute_os

    - name: Install development tools
      ansible.builtin.package:
        name: "{{ dev_tools }}"
        state: present
      tags: install
      when:
        - os_supported_leap not in compute_os
        - os_supported_redhat not in compute_os

    - name: Install development tools
      ansible.builtin.package:
        name: "{{ rhel_dev_tools }}"
        state: present
      tags: install
      when: os_supported_redhat in compute_os

    - name: Get the hostname
      ansible.builtin.command: hostname
      register: machine_name
      changed_when: true

    - name: Add control machine name
      ansible.builtin.lineinfile:
        path: "{{ slurm_confpth }}"
        regexp: "ControlMachine="
        line: "ControlMachine={{ machine_name.stdout }}"

    - name: Add slurm user name
      ansible.builtin.lineinfile:
        path: "{{ slurm_confpth }}"
        regexp: "SlurmUser="
        line: "SlurmUser={{ slurm_user }}"

    - name: Install firewalld
      ansible.builtin.package:
        name: firewalld
        state: present
      tags: firewalld

    - name: Start and enable firewalld
      ansible.builtin.service:
        name: firewalld
        state: started
        enabled: true
      tags: firewalld

    - name: Firewall rule for slurm - tcp/udp ports
      ansible.builtin.command: "firewall-cmd --zone=public --permanent --add-port={{ item }}"
      with_items:
        - "{{ tcp_port1 }}"
        - "{{ tcp_port2 }}"
        - "{{ tcp_port3 }}"
        - "{{ tcp_port4 }}"
        - "{{ tcp_port5 }}"
        - "{{ udp_port3 }}"
        - "{{ udp_port1 }}"
        - "{{ udp_port2 }}"
        - "{{ udp_port4 }}"
      when: "'manager' in group_names"
      changed_when: true
      tags: firewalld

    - name: Get network address/subnet mask
      ansible.builtin.set_fact:
        network_address: "{{ (ansible_default_ipv4.network + '/' + ansible_default_ipv4.netmask) | ansible.utils.ipaddr('network/prefix') }}"
      when: not hostvars['127.0.0.1']['ansible_collection_used']

    - name: Get network address/subnet mask
      ansible.builtin.set_fact:
        network_address: "{{ (ansible_default_ipv4.network + '/' + ansible_default_ipv4.netmask) | ansible.utils.ipaddr('network/prefix') }}"
      when: hostvars['127.0.0.1']['ansible_collection_used']

    - name: Firewall rule slurm - allow all incoming traffic on internal network
      ansible.builtin.command: |
            firewall-cmd --add-rich-rule='rule family={{ family }} source address={{ network_address }} accept'
      changed_when: true
      tags: firewalld

    - name: Reload firewalld
      ansible.builtin.command: firewall-cmd --reload
      changed_when: true
      tags: firewalld

    - name: Start mariadb
      ansible.builtin.systemd:
        name: mariadb
        state: restarted
        enabled: true
      tags: install

    - name: Grant permissions for slurm db
      ansible.builtin.command: >-
        mysql -u root -e "GRANT ALL ON slurm_acct_db.* TO '{{ db_user }}'@'{{
        db_host }}' identified by '{{ hostvars['127.0.0.1']['db_password'] }}'with
        grant option;"
      tags: install
      changed_when: true

    - name: Create slurmdbd.conf file
      ansible.builtin.copy:
        src: slurmdbd.conf
        dest: "{{ slurmdbd_path }}"
        mode: "{{ slurmdbd_mode }}"
        owner: slurm
      tags: install

    - name: Add slurm user name
      ansible.builtin.lineinfile:
        path: "{{ slurmdbd_path }}"
        regexp: "SlurmUser="
        line: "SlurmUser={{ slurm_user }}"

    - name: Add db address
      ansible.builtin.lineinfile:
        path: "{{ slurmdbd_path }}"
        regexp: "DbdAddr="
        line: "DbdAddr={{ dbd_addr }}"

    - name: Add db host
      ansible.builtin.lineinfile:
        path: "{{ slurmdbd_path }}"
        regexp: "DbdHost="
        line: "DbdHost={{ dbd_host }}"

    - name: Add storage password
      ansible.builtin.lineinfile:
        path: "{{ slurmdbd_path }}"
        regexp: "StoragePass="
        line: "StoragePass={{ hostvars['127.0.0.1']['db_password'] }}"

    - name: Add storage user
      ansible.builtin.lineinfile:
        path: "{{ slurmdbd_path }}"
        regexp: "StorageUser="
        line: "StorageUser={{ slurm_user }}"

    - name: Add log file path
      ansible.builtin.lineinfile:
        path: "{{ slurmdbd_path }}"
        regexp: "LogFile="
        line: "LogFile={{ logfile }}"

    - name: Add pid file path
      ansible.builtin.lineinfile:
        path: "{{ slurmdbd_path }}"
        regexp: "PidFile="
        line: "PidFile={{ pidfile }}"

    - name: Save slurm conf file in buffer
      ansible.builtin.fetch:
        src: "{{ slurm_confpth }}"
        dest: "{{ buffer_path }}"
        flat: true
