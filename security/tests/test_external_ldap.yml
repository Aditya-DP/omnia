#  Copyright 2023 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---
# Validate Openldap, Sssd, SSSD-LDAP, Oddjobmkdir, Openssl After execution of seciurity.yml with Ldap true
- name: Validate Openldap, Sssd, SSSD-LDAP, Oddjobmkdir, Openssl After execution of seciurity.yml with Ldap true
  hosts: all
  vars_files:
    - "{{ playbook_dir }}/test_vars/test_ldap_vars.yml"
  tasks:
    - name: To validate Openldap, Sssd, SSSD-LDAP, Oddjobmkdir, Openssl
      block:
        - name: Find Openldap Installation
          ansible.legacy.shell: "rpm -qa | grep openldap*"
          register: openldap
          changed_when: false
        - name: Validate Openldap instalaltion
          ansible.legacy.assert:
            that:
              - "'openldap' in openldap.stdout"
            success_msg: "{{ openldap_success_msg }}"
            fail_msg: "{{ openldap_success_msg }}"
        - name: Find sssd Installation
          ansible.legacy.shell: "rpm -qa | grep sssd"
          register: sssd
          changed_when: false
        - name: Validate sssd instalaltion
          ansible.legacy.assert:
            that:
              - "'sssd' in sssd.stdout"
            success_msg: "{{ sssd_success_msg }}"
            fail_msg: "{{ sssd_fail_msg }}"
        - name: Find sssd-ldap Installation
          ansible.legacy.shell: "rpm -qa | grep sssd-ldap"
          register: sssd_ldap
          changed_when: false
        - name: Validate sssd-ldap instalaltion
          ansible.legacy.assert:
            that:
              - "'sssd-ldap' in sssd_ldap.stdout"
            success_msg: "{{ sssd_ldap_success_msg }}"
            fail_msg: "{{ sssd_ldap_fail_msg }}"
        - name: Find Oddjob-Mkhomedir Installation
          ansible.legacy.shell: "rpm -qa | grep oddjob-mkhomedir"
          register: oddjob
          changed_when: false
        - name: Validate Oddjob-Mkhomedir instalaltion
          ansible.legacy.assert:
            that:
              - "'oddjob-mkhomedir' in oddjob.stdout"
            success_msg: "{{ oddjob_success_msg }}"
            fail_msg: "{{ oddjob_fail_msg }}"
        - name: Find Openssl Installation
          ansible.legacy.shell: "rpm -qa | grep openssl*"
          register: openssl
          changed_when: false
        - name: Validate Openssl instalaltion
          ansible.legacy.assert:
            that:
              - "'openssl' in openssl.stdout"
            success_msg: "{{ openssl_success_msg }}"
            fail_msg: "{{ openssl_fail_msg }}"
      tags: TC_001
# Checking Services Status For Ldap server
- name: Validate SSSD and Oddjob-Mkdir Status
  hosts: manager,compute,login
  vars_files:
    - "{{ playbook_dir }}/test_vars/test_ldap_vars.yml"
  tasks:
    - name: To validate user creation on manager,compute and Login node
      block:
        - name: Oddjobmaker service status
          ansible.legacy.shell: "systemctl status oddjob-mkhomedir.service"
          register: oddjob
          changed_when: false
        - name: Validate oddjob-mkdie.service Status
          ansible.legacy.assert:
            that:
              - "'Active: active (running)' in oddjob.stdout"
            success_msg: "{{ oddjob_status_success_msg }}"
            fail_msg: "{{ oddjob_status_fail_msg }}"
        - name: Sssd service status
          ansible.legacy.shell: "systemctl status sssd.service"
          register: sssd
          changed_when: false
        - name: Validate sssd.service Status
          ansible.legacy.assert:
            that:
              - "'Active: active (running)' in sssd.stdout"
            success_msg: "{{ sssd_status_success_msg }}"
            fail_msg: "{{ sssd_status_fail_msg }}"
      tags: TC_002
# Testcase to validate presence of created user in LDAP clients when
# login_node_required and ldap_required is true
- name: OMNIA_1.4_LDAP_TC_003
  hosts: login_node, manager, compute
  vars_files:
    - "{{ playbook_dir }}/test_vars/test_ldap_vars.yml"
  tasks:
    - name: Validate presence of user created in server on clients
      block:
        - name: Identify presence of created user on LDAP clients
          ansible.legacy.shell: "ldapsearch -x -D {{ user_olcRootDN }},{{ user_olcSuffix }} -w {{ slapd_password }} -s onelevel -b 'uid={{ user }},{{ user_group }},{{ user_olcSuffix }}'"
          register: ldap_user_search_msg
          changed_when: false

        - name: Validate presence of LDAP user on clients
          ansible.legacy.assert:
            that:
              - '"{{ user }}" in ldap_user_search_msg.stdout'
            success_msg: "{{ ldap_user_search_client_success_msg }}"
            fail_msg: "{{ ldap_user_search_client_fail_msg }}"
      tags: LDAP_TC_003
- name: Validate user Creation on login compute and manager node
  hosts: manager,compute,login
  vars_files:
    - "{{ playbook_dir }}/test_vars/test_ldap_vars.yml"
  tasks:
    - name: To validate user creation on manager,compute and Login node
      block:
        - name: Find Openldap Installation
          ansible.legacy.shell: "getent passwd {{ user }}"
          register: usr
          changed_when: false
        - name: Validate user Creation
          ansible.legacy.assert:
            that:
              - "'{{ user }}' in usr.stdout"
            success_msg: "{{ user_success_msg }}"
            fail_msg: "{{ user_fail_msg }}"
      tags: TC_003
- name: Check user Login
  hosts: all
  vars_files:
    - "{{ playbook_dir }}/test_vars/test_ldap_vars.yml"
  tasks:
    - name: To validate user creation on manager,compute and Login node
      block:
        - name: Find User Creation Installation
          ansible.legacy.shell: "getent passwd {{ user }}"
          register: usr
          changed_when: false
        - name: Validate user Creation
          ansible.legacy.assert:
            that:
              - "'{{ user }}' in usr.stdout"
            success_msg: "{{ user_success_msg }}"
            fail_msg: "{{ user_fail_msg }}"
      

# Testcase to validate LDAP client installation on client nodes when
# login_node_required and ldap_required is true
# Testcase to create LDAP user in server
- name: OMNIA_1.4_LDAP_TC_002
  hosts: ldap_server
  vars_files:
    - "{{ playbook_dir }}/test_vars/test_ldap_vars.yml"
  tasks:
    - name: Create a user in LDAP server
      block:
        - name: Create random cn for the user
          ansible.legacy.shell: echo "{{ ldap_cn_var + random_number }}"
          register: ldap_user_cn
          changed_when: false

        - name: Create random sn for the user
          ansible.legacy.shell: echo "{{ ldap_sn_var + random_number }}"
          register: ldap_user_sn
          changed_when: false

        - name: Modify adduser.ldif to add dn
          ansible.legacy.replace:
            path: '/root/adduser.ldif'
            regexp: "^dn: .*$"
            replace: "dn: cn={{ ldap_user_cn.stdout }} {{ ldap_user_sn.stdout }},ou=users, {{ user_olcSuffix }}"

        - name: Modify adduser.ldif to add random cn
          ansible.legacy.replace:
            path: '/root/adduser.ldif'
            regexp: "^cn: .*$"
            replace: "cn: {{ ldap_user_cn.stdout }}"

        - name: Modify adduser.ldif to add random sn
          ansible.legacy.replace:
            path: '/root/adduser.ldif'
            regexp: "^sn: .*$"
            replace: "sn: {{ ldap_user_sn.stdout }}"

        - name: Modify adduser.ldif to add password for the user
          ansible.legacy.replace:
            path: '/root/adduser.ldif'
            regexp: "^userPassword: .*$"
            replace: "userPassword: {{ random_user_passwd }}"

        - name: Modify adduser.ldif to add user ID for the user
          ansible.legacy.replace:
            path: '/root/adduser.ldif'
            regexp: "^uid: .*$"
            replace: "uid: {{ ldap_user_cn.stdout }}"

        - name: Create random user in LDAP server
          ansible.legacy.shell: "ldapadd -f {{ add_user_file_path }} -x -D {{ user_olcRootDN }},{{ user_olcSuffix }} -w {{ slapd_password }}"
          register: ldap_add_user_msg
          changed_when: false

        - name: Validate presence of created user in LDAP server
          ansible.legacy.assert:
            that:
              - '"{{ ldap_user_cn.stdout }}" in ldap_add_user_msg.stdout'
            success_msg: "{{ ldap_add_user_success_msg }} {{ ldap_user_cn.stdout }}"
            fail_msg: "{{ ldap_add_user_fail_msg }}"
      tags: LDAP_TC_002, LDAP_TC_003
