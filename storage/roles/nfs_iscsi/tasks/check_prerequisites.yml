#  Copyright 2022 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

# Include base_vars.yml
- name: Include base_vars of control plane
  ansible.builtin.include_vars: "{{ role_path }}/../../control_plane/input_params/base_vars.yml"

# Check nfs_node_status
- name: Check NFS Node Status
  when: powervault_support
  block:
    - name: Initialize variables
      ansible.builtin.set_fact:
        nfs_node_status: false

    - name: Set NFS node status
      ansible.builtin.set_fact:
        nfs_node_status: true
      when:
        - groups['nfs'] is defined
        - groups['nfs'] | length | int > 0

    - name: NFS group to contain exactly 1 node
      ansible.builtin.assert:
        that: "groups['nfs'] | length | int == 1"
        fail_msg: "{{ nfs_node_group_fail_msg }}"
        success_msg: "{{ nfs_node_group_success_msg }}"
      when: nfs_node_status

    # Include omnia_config.yml
    - name: Check if omnia_vault_key exists
      ansible.builtin.stat:
        path: "{{ role_path }}/../../{{ config_vaultname }}"
      register: vault_key_result

    - name: Create ansible vault key if it does not exist
      ansible.builtin.set_fact:
        vault_key: "{{ lookup('password', '/dev/null chars=ascii_letters') }}"
      when: not vault_key_result.stat.exists

    - name: Save vault key
      ansible.builtin.copy:
        dest: "{{ role_path }}/../../{{ config_vaultname }}"
        content: |
          {{ vault_key }}
        force: true
        mode: "{{ vault_file_perm }}"
      when: not vault_key_result.stat.exists

    - name: Check if omnia config file is encrypted
      ansible.builtin.command: cat {{ role_path }}/../../{{ config_filename }}
      changed_when: false
      register: config_content
      no_log: True # noqa: yaml[truthy]

    - name: Decrpyt omnia_config.yml
      ansible.builtin.command: >-
        ansible-vault decrypt {{ role_path }}/../../{{ config_filename }}
        --vault-password-file {{ role_path }}/../../{{ config_vaultname }}
      when: "'$ANSIBLE_VAULT;' in config_content.stdout"
      changed_when: false

    - name: Include variable file omnia_config.yml
      ansible.builtin.include_vars: "{{ role_path }}/../../{{ config_filename }}"
      no_log: true

    # Include login_vars.yml

    - name: Check login_vars file is encrypted
      ansible.builtin.command: cat "{{ role_path }}/../../control_plane/{{ login_vars_filename }}"
      changed_when: false
      register: config_content
      no_log: true

    - name: Decrpyt login_vars.yml
      ansible.builtin.command: >-
        ansible-vault decrypt "{{ role_path }}/../../control_plane/{{ login_vars_filename }}"
        --vault-password-file "{{ role_path }}/../../control_plane/{{ vault_filename }}"
      changed_when: false
      when: "'$ANSIBLE_VAULT;' in config_content.stdout"

    - name: Include variable file login_vars.yml
      ansible.builtin.include_vars: "{{ role_path }}/../../control_plane/{{ login_vars_filename }}"
      no_log: true

# Validate Powervault variables
- name: Fetch powervault inputs
  ansible.builtin.include_tasks: "../../cluster_validation/tasks/fetch_powervault_status.yml"
  when:
    - powervault_support
    - nfs_node_status

# Encrpyt omnia_config.yml file
- name: Encrypt omnia_config.yml
  when: powervault_support
  block:
    - name: Encrypt input config file
      ansible.builtin.command: >-
        ansible-vault encrypt {{ role_path }}/../../{{ config_filename }}
        --vault-password-file {{ role_path }}/../../{{ config_vaultname }}
      changed_when: false

  # Encrypt login_vars.yml file
    - name: Create ansible vault key
      ansible.builtin.set_fact:
        vault_key: "{{ lookup('password', '/dev/null chars=ascii_letters') }}"
      when: "'$ANSIBLE_VAULT;' not in config_content.stdout"

    - name: Save vault key
      ansible.builtin.copy:
        dest: "{{ role_path }}/../../control_plane/{{ vault_filename }}"
        content: |
          {{ vault_key }}
        force: true
        mode: "{{ vault_file_perm }}"
      when: "'$ANSIBLE_VAULT;' not in config_content.stdout"

    - name: Encrypt login_vars file
      ansible.builtin.command: >-
        ansible-vault encrypt "{{ role_path }}/../../control_plane/{{ login_vars_filename }}"
        --vault-password-file "{{ role_path }}/../../control_plane/{{ vault_filename }}"
      changed_when: false

    - name: Update login_vars.yml permission
      ansible.builtin.file:
        path: "{{ role_path }}/../../control_plane/{{ login_vars_filename }}"
        mode: "{{ vault_file_perm }}"
