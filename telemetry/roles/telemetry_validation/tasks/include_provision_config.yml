# Copyright 2023 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

# Include provision_config.yml

- name: Check that the provision_config.yml exists
  ansible.builtin.stat:
    path: "{{ provision_config_file }}"
  register: stat_result

- name: Fail if provision_config.yml file doesn't exist
  ansible.builtin.fail:
    msg: "{{ fail_msg_provision_config_file }}"
  when: not stat_result.stat.exists

- name: Check provision_config.yml file is encrypted
  ansible.builtin.command: cat {{ provision_config_file }}
  changed_when: false
  register: config_content
  no_log: true

- name: Decrpyt provision_config.yml
  ansible.builtin.command: >-
    ansible-vault decrypt {{ provision_config_file }}
    --vault-password-file {{ provision_vault_filename }}
  changed_when: false
  when: "'$ANSIBLE_VAULT;' in config_content.stdout"

- name: Include variable file provision_config.yml
  ansible.builtin.include_vars: "{{ provision_config_file }}"
  no_log: true

- name: Install dos2unix package
  ansible.builtin.package:
    name: dos2unix
    state: present

- name: Convert timezone.txt to linux format
  ansible.builtin.command: dos2unix {{ role_path }}/../../../provision/roles/provision_validation/files/timezone.txt
  failed_when: false
  changed_when: false

- name: Searching for timezone
  ansible.builtin.lineinfile:
    path: "{{ role_path }}/../../../provision/roles/provision_validation/files/timezone.txt"
    line: "{{ timezone }}"
    state: present
  check_mode: true
  register: timezone_search

- name: Assert timezone
  ansible.builtin.assert:
    that: timezone_search is not changed
    fail_msg: "{{ fail_timezone_msg }}"
  register: timezone_check

- name: Set variable if metallb needs to be configured
  when: omnia_telemetry_support or idrac_telemetry_support or visualization_support
  block:
    - name: Register IPAddressPool output
      ansible.builtin.command: "kubectl get IPAddressPool -A"
      changed_when: false
      failed_when: false
      register: ipaddresspool_output

    - name: Convert admin_nic_subnet to first two octets and Set pod_external_ip_range
      when: "'metallb-system' not in ipaddresspool_output.stdout"
      block:

        - name: Convert admin_nic_subnet to first two octets
          ansible.builtin.set_fact:
            first_two_octets: "{{ admin_nic_subnet | regex_replace('(\\d+\\.\\d+\\.)(\\d+\\.\\d+)', '\\1') }}"

        - name: Set pod_external_ip_range (Part 1 - First Two Octets)
          ansible.builtin.set_fact:
            pod_ext_ip_range_part1: "{{ first_two_octets.split('.')[0] }}.{{ first_two_octets.split('.')[1] }}"

        - name: Set pod_external_ip_range (Part 2 - Start Range)
          ansible.builtin.set_fact:
            pod_ext_ip_range_part2: "{{ pod_external_ip_start_range.split('.')[2] }}.{{ pod_external_ip_start_range.split('.')[3] }}"

        - name: Set pod_external_ip_range (Part 3 - End Range)
          ansible.builtin.set_fact:
            pod_ext_ip_range_part3: "{{ pod_external_ip_end_range.split('.')[2] }}.{{ pod_external_ip_end_range.split('.')[3] }}"

        - name: Combine parts to set final pod_external_ip_range
          ansible.builtin.set_fact:
            pod_external_ip_range: "{{ pod_ext_ip_range_part1 }}.{{ pod_ext_ip_range_part2 }}-{{ pod_ext_ip_range_part1 }}.{{ pod_ext_ip_range_part3 }}"

- name: Create ansible vault key
  ansible.builtin.set_fact:
    vault_key: "{{ lookup('password', '/dev/null chars=ascii_letters') }}"
  when: "'$ANSIBLE_VAULT;' not in config_content.stdout"

- name: Save vault key
  ansible.builtin.lineinfile:
    path: "{{ provision_vault_filename }}"
    line: "{{ vault_key }}"
    mode: "{{ vault_file_perm }}"
    owner: root
    create: true
  when: "'$ANSIBLE_VAULT;' not in config_content.stdout"

- name: Encrypt telemetry_config.yml file
  ansible.builtin.command: >-
    ansible-vault encrypt {{ provision_config_file }}
    --vault-password-file {{ provision_vault_filename }}
  changed_when: false
