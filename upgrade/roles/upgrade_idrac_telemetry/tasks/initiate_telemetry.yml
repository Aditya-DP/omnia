# Copyright 2024 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

# Include and initialize variables
- name: Initiate telemetry process if idrac_support is enabled
  when: idrac_telemetry_support is true and 'idrac' in groups
  block:
    - name: Initialize variables
      ansible.builtin.set_fact:
        idrac_telemetry_scripting_repo: "https://github.com/dell/iDRAC-Telemetry-Scripting.git"
        idrac_telemetry_scripting_stable_commit: "1f4bb26"
        idrac_telemetry_scripting_folder: iDRAC-Telemetry-Scripting
        login_vars_file: "{{ playbook_dir }}/input_params/telemetry_login_vars.yml"
        vault_filename: "{{ playbook_dir }}/input_params/.login_vault_key"
        idrac_inventory_filename: "/opt/omnia/idrac_inventory"
        idrac_file_existence: "iDRAC inventory file does not exist. Check /opt/omnia/idrac_inventory."
        monitor_config_file: "{{ playbook_dir }}/../input/monitor_config.yml"
        monitor_config_vault_filename: "{{ playbook_dir }}/../input/.monitor_vault_key"
        min_firmware_version_reqd: 3
        datacenter_license: false
        firmware_version: false
        file_perm: '0644'
        telemetry_idrac: []
        service_type: 3
        auth_type: 1
        idrac_awx_count: 0
        filtered_idrac_count: 0
        failed_idrac: []
        awx_idrac: []

# Filter iDRACs matching telemetry pre-requisites

    - name: Add iDRAC nodes and initiate telemetry
      ansible.builtin.include_tasks: filter_idrac.yml
      with_items: "{{ groups['idrac'] }}"
      loop_control:
        index_var: idrac_index
 #     no_log: true

# Add iDRAC Credentials in DB and enable telemetry fetching

    - name: Enable telemetry collection on iDRAC
      when: telemetry_idrac is defined and (telemetry_idrac | length > 0)
      block:
        - name: Git clone telemetry initialization repo
          ansible.builtin.git:
            repo: "{{ idrac_telemetry_scripting_repo }}"
            dest: "{{ mount_location + idrac_telemetry_scripting_folder }}"
            version: "{{ idrac_telemetry_scripting_stable_commit }}"
          register: telemetry_collection

        - name: Enable telemetry collection on iDRACs
          ansible.builtin.command: >-
            "{{ python_version }}" ./ConfigurationScripts/EnableOrDisableAllTelemetryReports.py -ip "{{ item }}"
            -u "{{ idrac_username }}" -p "{{ idrac_password }}" -s Enabled
          args:
            chdir: "{{ mount_location + idrac_telemetry_scripting_folder }}"
          with_items: "{{ telemetry_idrac }}"
          changed_when: false
          no_log: true

      rescue:
        - name: Show failure msg
          ansible.builtin.debug:
            msg: "Enabling telemetry on an iDRAC failed"


# Initiate iDRAC collection
    - name: Initiate telemetry collection
      when: telemetry_idrac is defined and (telemetry_idrac | length > 0)
      block:
        - name: Wait for idrac-telemetry pod to come to ready state
          ansible.builtin.command: kubectl wait --for=condition=ready --timeout=10m -n "{{ namespace }}" pod -l app="{{ idrac_telemetry_k8s_name }}"
          changed_when: false

        - name: Get idrac-telemetry pod name
          ansible.builtin.command: kubectl get pods -n "{{ namespace }}" -l app="{{ idrac_telemetry_k8s_name }}" -o jsonpath="{.items[0].metadata.name}"
          changed_when: false
          register: idrac_telemetry_pod

        - name: Wait for 15 sec for mysqldb to be ready with updated values
          ansible.builtin.pause:
            seconds: 15

        - name: Initiate telemetry-collector
          ansible.builtin.shell: >-
            kubectl exec --stdin --tty "{{ idrac_telemetry_pod.stdout }}" -n "{{ namespace }}"
            -c telemetry-receiver -- nohup go run cmd/redfishread/redfishread.go &
          changed_when: false

    - name: Telemetry report
      ansible.builtin.debug:
        msg:
          - "Count of iDRAC IPs found: {{ idrac_awx_count }}"
          - "List of iDRAC IPs found: {{ awx_idrac }}"
          - "Count of iDRAC IPs where telemetry is initiated: {{ filtered_idrac_count }}"
          - "List of iDRAC IPs where telemetry is initiated: {{ telemetry_idrac }}"
