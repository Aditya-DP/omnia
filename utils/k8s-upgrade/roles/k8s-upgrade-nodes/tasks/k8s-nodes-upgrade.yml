---
- block:
    - name: "Check current version of kubeadm, kubelet and kubectl"
      shell: |
        rpm -qa | grep -E 'kubeadm|kubelet|kubectl'
      register: version

    - debug:
        var: version.stdout_lines

    - name: "Clear version lock"
      shell: yum versionlock clear

    - name: "Drain worker nodes -> {{ item.1 }}"
      shell: |
        kubectl drain {{ item.1 }} --ignore-daemonsets --delete-local-data
      delegate_to: "{{ item.0 }}"
      loop: "{{ groups['k8s-master'] | zip(groups['k8s-worker'])}}"
      ignore_errors: True

    - name: "Verify the upgrade node"
      shell: |
        kubeadm upgrade node --ignore-preflight-errors=all
      ignore_errors: True

    - name: "Upgrade Worker Node Packages with version {{ item }}"
      yum:
        name: "{{ item }}"
        disable_excludes: kubernetes
      with_items: "{{ upgrade_k8s_packages }}"
      ignore_errors: True

    - name: "Pull kubeadm config images"
      shell: |
        kubeadm config images pull

    - name: "Reload Daemon and kubelet"
      shell: |
        systemctl daemon-reload
        systemctl restart kubelet

    - name: "Uncordon Worker Node"
      shell: kubectl uncordon {{ item.1 }}
      delegate_to: "{{ item.0 }}"
      loop: "{{ groups['k8s-master'] | zip(groups['k8s-worker'])}}"
      ignore_errors: True

    - name: "Check Updated version of kubeadm, kubelet and kubectl"
      shell: |
        rpm -qa | grep -E 'kubeadm|kubelet|kubectl'
      register: version

    - debug:
        var: version.stdout_lines

    - name: "Put version lock back on packages"
      shell: |
        yum versionlock "{{ item }}"
      with_items: "{{ upgrade_k8s_packages }}"
      changed_when: true

    - debug:
        msg: "SUCCESS! Your worker nodes are upgraded to {{ item }}. Enjoy!"

  when: inventory_hostname in groups["k8s-worker"]
