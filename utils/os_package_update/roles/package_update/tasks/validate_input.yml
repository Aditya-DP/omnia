# Copyright 2023 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Validate os version
  ansible.builtin.assert:
    that:
      - os_version | length > 1
    success_msg: "{{ os_version_success_msg }}"
    fail_msg: "{{ os_version_fail_msg }}"

- name: Get the OS image details
  ansible.builtin.shell: set -o pipefail && lsdef -t osimage
  register: xcat_osimage_output
  changed_when: true

- name: Validate if input os_version object image is available
  ansible.builtin.fail:
    msg: OS Version is invalid or not avaiable.
  when: os_version not in xcat_osimage_output.stdout

- name: Validate package directory
  ansible.builtin.assert:
    that:
      - package_dir | length > 1
    success_msg: "{{ pkg_dir_success_msg }}"
    fail_msg: "{{ pkg_dir_fail_msg }}"

- name: Validate package list
  ansible.builtin.assert:
    that:
      - package_list | length > 1
    success_msg: "{{ pkg_list_success_msg }}"
    fail_msg: "{{ pkg_list_fail_msg }}"

- name: Validate package type
  ansible.builtin.assert:
    that:
      - package_type | length > 1
    success_msg: "{{ pkg_type_success_msg }}"
    fail_msg: "{{ pkg_type_fail_msg }}"

- name: Verify the value of package_type is valid
  ansible.builtin.assert:
    that:
      - package_type == "os" or package_type == "other"
    success_msg: "{{ pkg_type_success_msg }}"
    fail_msg: "{{ pkg_type_fail_msg }}"

- name: Fail if package directory not exists
  ansible.builtin.stat:
    path: "{{ item }}"
  register: pkg_dir
  loop: "{{ package_dir.split(',') }}"
  failed_when: not pkg_dir.stat.exists

- name: Check is package_list exists
  ansible.builtin.stat:
    path: "{{ package_list }}"
  register: pkg_list
  failed_when: not pkg_list.stat.exists
